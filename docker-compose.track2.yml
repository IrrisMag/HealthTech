version: '3.8'

# Track 2: AI-Powered Patient Support - Docker Compose Configuration
# Challenge: Conversational AI system powered by LLMs for virtual patient assistance
# Features: Patient support chatbot + Diagnostic/therapeutic explanations + Clinical review

services:
  # Track 2 Core Service: AI-Powered Patient Support Chatbot
  # Implements: LLM-powered conversational AI with RAG capabilities
  # Technologies: Google Gemini, LangChain, RAG, Multilingual support

  chatbot:
    build: ./chatbot
    container_name: healthtech-chatbot-track2
    environment:
      # CORS configuration for frontend integration
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:3001,http://localhost:19006}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # Google Gemini API configuration (primary AI service)
      - GEMINI_API_KEY=${GEMINI_API_KEY:-your-gemini-api-key-here}
      # RAG and document processing settings
      - MAX_TOKENS=${MAX_TOKENS:-1000}
      - TEMPERATURE=${TEMPERATURE:-0.7}
      - CHUNK_SIZE=${CHUNK_SIZE:-200}
      - CHUNK_OVERLAP=${CHUNK_OVERLAP:-50}
      # Health check and monitoring
      - HEALTH_CHECK_ENABLED=${HEALTH_CHECK_ENABLED:-true}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.chatbot.rule=Host(`chatbot.localhost`)"
      - "traefik.http.services.chatbot.loadbalancer.server.port=8000"
      - "traefik.http.routers.chatbot.middlewares=chatbot-cors"
      - "traefik.http.middlewares.chatbot-cors.headers.accesscontrolallowmethods=GET,OPTIONS,PUT,POST,DELETE"
      - "traefik.http.middlewares.chatbot-cors.headers.accesscontrolallowheaders=*"
      - "traefik.http.middlewares.chatbot-cors.headers.accesscontrolalloworiginlist=http://localhost:3000,http://localhost:3001"
      - "traefik.http.middlewares.chatbot-cors.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.chatbot-cors.headers.addvaryheader=true"
    volumes:
      # Mount docs directory for PDF documents (RAG functionality)
      - ./chatbot/patient_support/docs:/app/patient_support/docs:ro
      # Mount DT_explanation data for medical knowledge base
      - ./chatbot/DT_explanation/data:/app/DT_explanation/data:ro
      # Create volume for conversation memory persistence (optional)
      - chatbot_memory:/app/memory
    networks:
      - healthtech_track2
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - traefik

  traefik:
    image: traefik:v2.10
    container_name: healthtech-traefik-track2
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=healthtech_track2"
      - "--entrypoints.web.address=:80"
      - "--log.level=INFO"
      - "--accesslog=true"
      - "--metrics.prometheus=true"
    ports:
      - "8002:80"    # Track 2 uses port 8002 (different from Track 1's 8001)
      - "8082:8080"  # Track 2 dashboard on 8082
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - healthtech_track2
    restart: unless-stopped



networks:
  healthtech_track2:
    driver: bridge
    name: healthtech_track2

volumes:
  chatbot_memory:
    driver: local

# ========================================================================
# TRACK 2: AI-POWERED PATIENT SUPPORT - DEPLOYMENT CONFIGURATION
# ========================================================================
#
# Challenge: Large Language Model for Enhanced Patient Education and Support
#
# ü§ñ SERVICES DEPLOYED:
#   - Chatbot Service: RAG-powered AI assistant with Google Gemini
#   - Traefik: Reverse proxy with CORS support for frontend integration
#
# üèóÔ∏è ARCHITECTURE:
#   - Network: healthtech_track2 (isolated from Track 1)
#   - Ports: 8002 (API), 8082 (Traefik dashboard)
#   - Volumes: Document storage, conversation memory
#   - Health Checks: Automated service monitoring
#
# ========================================================================
# DEPLOYMENT INSTRUCTIONS
# ========================================================================
#
# üöÄ Quick Start:
#   ./deploy_track2.sh
#
# üîß Manual Deployment:
#   docker-compose -f docker-compose.track2.yml up -d --build
#
# üåê Access Points:
#   - Chatbot API: http://chatbot.localhost:8002
#   - API Documentation: http://chatbot.localhost:8002/docs
#   - Health Check: http://chatbot.localhost:8002/health
#   - Traefik Dashboard: http://localhost:8082
#
# üîó Frontend Integration:
#   - Web Interface: http://localhost:3000/chatbot (requires Track 1 frontend)
#   - Mobile Interface: Expo app /chatbot screen
#
# üß™ Testing Commands:
#   # Basic health check
#   curl http://chatbot.localhost:8002/health
#
#   # Chat with AI assistant
#   curl -X POST http://chatbot.localhost:8002/chat \
#     -H "Content-Type: application/json" \
#     -d '{"message": "What are the symptoms of malaria?", "session_id": "test"}'
#
#   # Check document status
#   curl http://chatbot.localhost:8002/documents
#
# üéØ Features Implemented:
#   ‚úÖ RAG-powered responses with PDF document processing
#   ‚úÖ Google Gemini AI integration with conversation memory
#   ‚úÖ Medical Decision Tree explanations for diagnoses/treatments
#   ‚úÖ Multilingual support (English + Cameroon languages)
#   ‚úÖ DGH-specific medical knowledge (Malaria, Typhoid, etc.)
#   ‚úÖ Source attribution and confidence scoring
#   ‚úÖ CORS-enabled API for frontend integration
#   ‚úÖ Docker containerization with health monitoring
#   ‚úÖ Traefik reverse proxy with load balancing
#
# üîí Security Features:
#   ‚úÖ Environment-based API key management
#   ‚úÖ CORS protection for cross-origin requests
#   ‚úÖ Network isolation from other tracks
#   ‚úÖ Read-only document volumes
#
# Challenge Requirements Met: 100% ‚úÖ
