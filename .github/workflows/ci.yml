name: HealthTech CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================================================
  # CODE QUALITY & SECURITY CHECKS
  # ============================================================================
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install development dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run comprehensive linting
        run: |
          chmod +x scripts/lint.sh
          ./scripts/lint.sh --verbose

      - name: Security scan with Bandit
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -f txt

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: bandit-report.json

      - name: Run safety check for dependencies
        run: |
          pip install safety
          safety check --json --output safety-report.json || true
          safety check

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-scan-results
          path: safety-report.json

  # ============================================================================
  # UNIT & INTEGRATION TESTS
  # ============================================================================
  test:
    name: Test Services
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      fail-fast: false
      matrix:
        service: [analysis, feedback, reminder, forecast, chatbot, data, optimization, auth, notification, event, translation]
        python-version: ['3.11', '3.12']

    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          if [ -f "${{ matrix.service }}/requirements.txt" ]; then
            pip install -r ${{ matrix.service }}/requirements.txt
          fi

      - name: Wait for MongoDB
        run: |
          timeout 60 bash -c 'until mongosh --host localhost:27017 --eval "db.adminCommand(\"ping\")" --quiet; do sleep 1; done'

      - name: Run unit tests
        env:
          MONGODB_URI: mongodb://admin:password@localhost:27017/test_db?authSource=admin
          ENVIRONMENT: testing
          JWT_SECRET: test-secret-key-for-ci
        run: |
          if [ -d "tests/${{ matrix.service }}" ]; then
            pytest tests/${{ matrix.service }}/ -v --cov=${{ matrix.service }} --cov-report=xml --cov-report=html
          else
            echo "No tests found for ${{ matrix.service }}"
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: matrix.python-version == '3.12'
        with:
          file: ./coverage.xml
          flags: ${{ matrix.service }}
          name: codecov-${{ matrix.service }}
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.service }}-py${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml
            pytest-report.xml

  # ============================================================================
  # INTEGRATION TESTS
  # ============================================================================
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start services with Docker Compose
        run: |
          # Start Track 1 services
          docker-compose -f docker-compose.track1.yml up -d
          sleep 30

          # Start Track 2 services
          docker-compose -f docker-compose.track2.yml up -d
          sleep 30

          # Start Track 3 services
          docker-compose -f docker-compose.track3.yml up -d
          sleep 30

      - name: Wait for services to be ready
        run: |
          timeout 300 bash -c '
            while ! curl -f http://localhost:8001/health 2>/dev/null; do
              echo "Waiting for Track 1 services..."
              sleep 5
            done
            while ! curl -f http://localhost:8003/health 2>/dev/null; do
              echo "Waiting for Track 2 services..."
              sleep 5
            done
            while ! curl -H "Host: data-track3.localhost" http://localhost:82/health 2>/dev/null; do
              echo "Waiting for Track 3 services..."
              sleep 5
            done
          '

      - name: Run integration tests
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

          # Run integration tests
          if [ -d "tests/integration" ]; then
            pytest tests/integration/ -v --tb=short
          else
            echo "No integration tests found"
          fi

      - name: Test API endpoints
        run: |
          # Test Track 1 APIs
          curl -f http://localhost:8001/health || exit 1

          # Test Track 2 APIs
          curl -f http://localhost:8003/health || exit 1

          # Test Track 3 APIs
          curl -f -H "Host: data-track3.localhost" http://localhost:82/health || exit 1

      - name: Collect service logs
        if: failure()
        run: |
          mkdir -p logs
          docker-compose -f docker-compose.track1.yml logs > logs/track1.log
          docker-compose -f docker-compose.track2.yml logs > logs/track2.log
          docker-compose -f docker-compose.track3.yml logs > logs/track3.log

      - name: Upload service logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: service-logs
          path: logs/

      - name: Cleanup
        if: always()
        run: |
          docker-compose -f docker-compose.track1.yml down
          docker-compose -f docker-compose.track2.yml down
          docker-compose -f docker-compose.track3.yml down

  # ============================================================================
  # DOCKER BUILD & PUSH
  # ============================================================================
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    strategy:
      matrix:
        service: [analysis, feedback, reminder, forecast, chatbot, data, optimization, auth, notification, event, translation]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:latest
          format: spdx-json
          output-file: sbom-${{ matrix.service }}.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.service }}
          path: sbom-${{ matrix.service }}.spdx.json

  # ============================================================================
  # SECURITY SCANNING
  # ============================================================================
  security-scan:
    name: Security Scan Docker Images
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    strategy:
      matrix:
        service: [analysis, feedback, reminder, forecast, chatbot, data, optimization, auth, notification, event, translation]

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:latest
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  # ============================================================================
  # DEPLOYMENT
  # ============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging environment
        run: |
          echo "🚀 Deploying to staging environment..."
          # Add your staging deployment logic here
          # This could be:
          # - Updating Kubernetes manifests
          # - Triggering Railway deployment
          # - Running deployment scripts

          # Example: Deploy to Railway
          if [ -f "deploy_track1.sh" ]; then
            chmod +x deploy_track1.sh
            ./deploy_track1.sh staging
          fi

      - name: Run smoke tests
        run: |
          echo "🧪 Running smoke tests on staging..."
          # Add smoke tests for staging environment
          sleep 30  # Wait for deployment

          # Test critical endpoints
          curl -f https://staging-api.yourdomain.com/health || exit 1

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Staging deployment successful"
          else
            echo "❌ Staging deployment failed"
          fi

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production environment
        run: |
          echo "🚀 Deploying to production environment..."
          # Add your production deployment logic here

          # Example: Deploy to Railway
          if [ -f "deploy_track1.sh" ]; then
            chmod +x deploy_track1.sh
            ./deploy_track1.sh production
          fi

      - name: Run production smoke tests
        run: |
          echo "🧪 Running smoke tests on production..."
          sleep 60  # Wait for deployment

          # Test critical endpoints
          curl -f https://api.yourdomain.com/health || exit 1

      - name: Create release
        if: github.event_name == 'push'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## Changes in this Release
            - Automated release from commit ${{ github.sha }}
            - All tests passed
            - Security scans completed
            - Deployed to production
          draft: false
          prerelease: false

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Production deployment successful"
          else
            echo "❌ Production deployment failed"
          fi
