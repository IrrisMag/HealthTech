name: Pull Request Validation

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_review:
    types: [submitted]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================================================
  # PR VALIDATION & QUALITY CHECKS
  # ============================================================================
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Validate PR title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
          requireScope: false
          disallowScopes: |
            release
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            didn't match the configured pattern. Please ensure that the subject
            doesn't start with an uppercase character.

      - name: Check for breaking changes
        run: |
          echo "Checking for breaking changes..."
          # Check if any API endpoints have been removed or modified
          git diff origin/main...HEAD --name-only | grep -E "(main\.py|routes\.py)" | while read file; do
            if [ -f "$file" ]; then
              echo "Checking $file for breaking changes..."
              # Add your breaking change detection logic here
            fi
          done

      - name: Lint changed files only
        run: |
          # Get list of changed Python files
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD | grep '\.py$' | tr '\n' ' ')
          if [ -n "$CHANGED_FILES" ]; then
            echo "Linting changed files: $CHANGED_FILES"
            flake8 $CHANGED_FILES --max-line-length=120
            black --check --line-length=120 $CHANGED_FILES
            isort --check-only --profile=black $CHANGED_FILES
          else
            echo "No Python files changed"
          fi

      - name: Type check changed files
        run: |
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD | grep '\.py$' | tr '\n' ' ')
          if [ -n "$CHANGED_FILES" ]; then
            echo "Type checking changed files: $CHANGED_FILES"
            mypy $CHANGED_FILES --ignore-missing-imports || true
          fi

      - name: Security scan on changes
        run: |
          # Run security scan only on changed files
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD | grep '\.py$' | tr '\n' ' ')
          if [ -n "$CHANGED_FILES" ]; then
            bandit $CHANGED_FILES -f json -o bandit-pr-report.json || true
            bandit $CHANGED_FILES
          fi

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pr-security-scan
          path: bandit-pr-report.json

  # ============================================================================
  # AFFECTED SERVICES TESTING
  # ============================================================================
  test-affected-services:
    name: Test Affected Services
    runs-on: ubuntu-latest
    needs: pr-validation
    if: github.event.pull_request.draft == false
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Detect affected services
        id: affected-services
        run: |
          # Detect which services are affected by the changes
          AFFECTED_SERVICES=""
          
          # Check each service directory for changes
          for service in auth feedback reminder notification translation analysis data optimization chatbot event forecast; do
            if git diff --name-only origin/main...HEAD | grep -q "^$service/"; then
              AFFECTED_SERVICES="$AFFECTED_SERVICES $service"
            fi
          done
          
          # If tests directory changed, test all services
          if git diff --name-only origin/main...HEAD | grep -q "^tests/"; then
            AFFECTED_SERVICES="auth feedback reminder notification translation analysis data optimization chatbot event forecast"
          fi
          
          echo "affected-services=$AFFECTED_SERVICES" >> $GITHUB_OUTPUT
          echo "Affected services: $AFFECTED_SERVICES"

      - name: Run tests for affected services
        env:
          MONGODB_URI: mongodb://admin:password@localhost:27017/test_db?authSource=admin
          ENVIRONMENT: testing
          JWT_SECRET: test-secret-key-for-pr
        run: |
          AFFECTED_SERVICES="${{ steps.affected-services.outputs.affected-services }}"
          
          if [ -n "$AFFECTED_SERVICES" ]; then
            for service in $AFFECTED_SERVICES; do
              echo "Testing $service..."
              if [ -d "tests/$service" ]; then
                pytest tests/$service/ -v --cov=$service --cov-report=xml:coverage-$service.xml
              else
                echo "No tests found for $service"
              fi
            done
          else
            echo "No services affected, running basic tests"
            pytest tests/ -k "not integration and not e2e" -v
          fi

      - name: Upload coverage for affected services
        uses: codecov/codecov-action@v4
        if: matrix.python-version == '3.12'
        with:
          files: ./coverage-*.xml
          flags: pr-affected-services
          name: codecov-pr-${{ github.event.number }}

  # ============================================================================
  # DOCKER BUILD VALIDATION
  # ============================================================================
  docker-build-validation:
    name: Docker Build Validation
    runs-on: ubuntu-latest
    needs: pr-validation
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Detect affected services for Docker build
        id: docker-affected
        run: |
          AFFECTED_SERVICES=""
          
          for service in auth feedback reminder notification translation analysis data optimization chatbot event forecast; do
            if git diff --name-only origin/main...HEAD | grep -q "^$service/"; then
              AFFECTED_SERVICES="$AFFECTED_SERVICES $service"
            fi
          done
          
          echo "affected-services=$AFFECTED_SERVICES" >> $GITHUB_OUTPUT
          echo "Services to build: $AFFECTED_SERVICES"

      - name: Build Docker images for affected services
        run: |
          AFFECTED_SERVICES="${{ steps.docker-affected.outputs.affected-services }}"
          
          if [ -n "$AFFECTED_SERVICES" ]; then
            for service in $AFFECTED_SERVICES; do
              if [ -f "$service/Dockerfile" ]; then
                echo "Building Docker image for $service..."
                docker build -t healthtech-$service:pr-${{ github.event.number }} $service/
              fi
            done
          else
            echo "No services affected, skipping Docker builds"
          fi

      - name: Test Docker images
        run: |
          AFFECTED_SERVICES="${{ steps.docker-affected.outputs.affected-services }}"
          
          if [ -n "$AFFECTED_SERVICES" ]; then
            for service in $AFFECTED_SERVICES; do
              if docker images | grep -q "healthtech-$service:pr-${{ github.event.number }}"; then
                echo "Testing Docker image for $service..."
                # Run basic container test
                docker run --rm healthtech-$service:pr-${{ github.event.number }} python -c "print('Container test passed')"
              fi
            done
          fi

  # ============================================================================
  # INTEGRATION TEST PREVIEW
  # ============================================================================
  integration-preview:
    name: Integration Test Preview
    runs-on: ubuntu-latest
    needs: [test-affected-services, docker-build-validation]
    if: github.event.pull_request.draft == false && contains(github.event.pull_request.labels.*.name, 'integration-test')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start integration test environment
        run: |
          # Start a minimal integration test environment
          docker-compose -f docker-compose.track1.yml up -d
          sleep 30

      - name: Run integration tests
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          
          # Run integration tests
          pytest tests/ -m "integration" -v --tb=short

      - name: Cleanup integration environment
        if: always()
        run: |
          docker-compose -f docker-compose.track1.yml down

  # ============================================================================
  # PR SUMMARY COMMENT
  # ============================================================================
  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [pr-validation, test-affected-services, docker-build-validation]
    if: always() && github.event.pull_request.draft == false
    
    steps:
      - name: Generate PR summary
        uses: actions/github-script@v7
        with:
          script: |
            const { data: checkRuns } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request.head.sha
            });
            
            const prValidation = '${{ needs.pr-validation.result }}';
            const testResults = '${{ needs.test-affected-services.result }}';
            const dockerResults = '${{ needs.docker-build-validation.result }}';
            
            const summary = `## 🔍 PR Validation Summary
            
            | Check | Status |
            |-------|--------|
            | PR Validation | ${prValidation === 'success' ? '✅' : '❌'} ${prValidation} |
            | Affected Services Tests | ${testResults === 'success' ? '✅' : '❌'} ${testResults} |
            | Docker Build Validation | ${dockerResults === 'success' ? '✅' : '❌'} ${dockerResults} |
            
            ### 📊 Test Coverage
            Coverage reports will be available after the tests complete.
            
            ### 🔒 Security Scan
            Security scan results are available in the artifacts.
            
            ### 🐳 Docker Builds
            Docker images have been validated for affected services.
            
            ---
            *This comment is automatically updated on each push.*`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number
            });
            
            const existingComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('PR Validation Summary')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: summary
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: summary
              });
            }
