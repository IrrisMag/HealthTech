name: Security Monitoring & Dependency Updates

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  # ============================================================================
  # DEPENDENCY VULNERABILITY SCANNING
  # ============================================================================
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit

      - name: Run safety check
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Run pip-audit
        run: |
          pip-audit --format=json --output=pip-audit-report.json || true
          pip-audit

      - name: Upload vulnerability reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vulnerability-reports
          path: |
            safety-report.json
            pip-audit-report.json

  # ============================================================================
  # DOCKER IMAGE SECURITY SCANNING
  # ============================================================================
  image-security-scan:
    name: Docker Image Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [analysis, feedback, reminder, forecast, chatbot, data, optimization, auth, notification, event, translation]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t ${{ matrix.service }}:security-scan ${{ matrix.service }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.service }}:security-scan
          format: 'json'
          output: 'trivy-${{ matrix.service }}.json'

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        with:
          image: ${{ matrix.service }}:security-scan
          output-format: json
          output-file: grype-${{ matrix.service }}.json

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-${{ matrix.service }}
          path: |
            trivy-${{ matrix.service }}.json
            grype-${{ matrix.service }}.json

  # ============================================================================
  # AUTOMATED DEPENDENCY UPDATES
  # ============================================================================
  dependency-update:
    name: Automated Dependency Updates
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install pip-tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools

      - name: Update dependencies
        run: |
          # Update development dependencies
          pip-compile --upgrade requirements-dev.txt
          
          # Update service dependencies
          for service in analysis feedback reminder forecast chatbot data optimization auth notification event translation; do
            if [ -f "$service/requirements.txt" ]; then
              echo "Updating dependencies for $service"
              cd $service
              pip-compile --upgrade requirements.txt
              cd ..
            fi
          done

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies'
          title: 'Automated Dependency Updates'
          body: |
            ## Automated Dependency Updates
            
            This PR contains automated dependency updates generated by the security monitoring workflow.
            
            ### Changes
            - Updated Python dependencies to latest secure versions
            - Resolved known security vulnerabilities
            
            ### Testing
            - [ ] All tests pass
            - [ ] Security scans pass
            - [ ] Manual testing completed
            
            **Note**: This PR was automatically generated. Please review changes carefully before merging.
          branch: automated-dependency-updates
          delete-branch: true

  # ============================================================================
  # SECURITY ALERTS
  # ============================================================================
  security-alerts:
    name: Security Alerts
    runs-on: ubuntu-latest
    needs: [dependency-scan, image-security-scan]
    if: always()
    
    steps:
      - name: Download vulnerability reports
        uses: actions/download-artifact@v4
        with:
          path: reports/

      - name: Process security alerts
        run: |
          echo "🔍 Processing security vulnerability reports..."
          
          # Check for critical vulnerabilities
          CRITICAL_FOUND=false
          
          if [ -f "reports/vulnerability-reports/safety-report.json" ]; then
            CRITICAL_COUNT=$(jq '.vulnerabilities | length' reports/vulnerability-reports/safety-report.json 2>/dev/null || echo "0")
            if [ "$CRITICAL_COUNT" -gt "0" ]; then
              CRITICAL_FOUND=true
              echo "⚠️ Found $CRITICAL_COUNT dependency vulnerabilities"
            fi
          fi
          
          # Create security summary
          cat > security-summary.md << EOF
          # Security Scan Summary
          
          **Scan Date**: $(date)
          **Repository**: ${{ github.repository }}
          **Branch**: ${{ github.ref_name }}
          
          ## Findings
          - Dependency vulnerabilities: $CRITICAL_COUNT
          - Docker image scans: Completed for all services
          
          ## Actions Required
          $(if [ "$CRITICAL_FOUND" = true ]; then echo "- 🚨 **URGENT**: Address critical vulnerabilities immediately"; else echo "- ✅ No critical vulnerabilities found"; fi)
          - Review and update dependencies regularly
          - Monitor security advisories
          
          EOF
          
          echo "CRITICAL_FOUND=$CRITICAL_FOUND" >> $GITHUB_ENV

      - name: Create security issue
        if: env.CRITICAL_FOUND == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Security Alert: Critical Vulnerabilities Found',
              body: summary,
              labels: ['security', 'critical', 'automated']
            });

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md
