# Railway Dockerfile for Track 2 - AI Chatbot System
FROM node:18-alpine AS frontend-builder

# Build the frontend with chatbot focus
WORKDIR /app/frontend
COPY feedback-reminder-system/feedback-ui-service/package*.json ./
RUN npm ci --only=production

COPY feedback-reminder-system/feedback-ui-service/ ./
ENV NODE_ENV=production
ENV NEXT_PUBLIC_CHATBOT_API_URL=/api/chatbot

RUN npm run build

# Python backend stage
FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies for chatbot
RUN echo "fastapi==0.104.1\n\
uvicorn[standard]==0.24.0\n\
pymongo==4.6.0\n\
google-generativeai==0.3.2\n\
langchain==0.1.0\n\
langchain-google-genai==0.0.6\n\
langchain-community==0.0.10\n\
chromadb==0.4.18\n\
pypdf==3.17.4\n\
python-multipart==0.0.6\n\
pydantic==2.5.0\n\
python-dotenv==1.0.0\n\
requests==2.31.0\n\
aiofiles==23.2.1\n\
sentence-transformers==2.2.2\n\
numpy==1.24.3\n\
tiktoken==0.5.2" > requirements.txt

RUN pip install --no-cache-dir -r requirements.txt

# Copy chatbot application
COPY chatbot/ ./chatbot/
COPY shared/ ./shared/

# Copy built frontend
COPY --from=frontend-builder /app/frontend/.next ./static/
COPY --from=frontend-builder /app/frontend/public ./static/public/

# Create unified application for Track 2
RUN echo 'from fastapi import FastAPI, Request\n\
from fastapi.staticfiles import StaticFiles\n\
from fastapi.responses import FileResponse\n\
from fastapi.middleware.cors import CORSMiddleware\n\
import uvicorn\n\
import os\n\
\n\
# Import chatbot app\n\
from chatbot.main import app as chatbot_app\n\
\n\
# Create main app\n\
app = FastAPI(\n\
    title="HealthTech Track 2 - AI Medical Assistant",\n\
    description="AI-powered medical chatbot with DT_explanation system",\n\
    version="2.0.0"\n\
)\n\
\n\
# Add CORS middleware\n\
app.add_middleware(\n\
    CORSMiddleware,\n\
    allow_origins=["*"],\n\
    allow_credentials=True,\n\
    allow_methods=["*"],\n\
    allow_headers=["*"],\n\
)\n\
\n\
# Mount chatbot API\n\
app.mount("/api/chatbot", chatbot_app)\n\
\n\
# Mount static files\n\
app.mount("/static", StaticFiles(directory="static"), name="static")\n\
\n\
# Health check\n\
@app.get("/health")\n\
async def health_check():\n\
    return {\n\
        "status": "healthy",\n\
        "service": "AI Medical Assistant",\n\
        "features": [\n\
            "DT_explanation System",\n\
            "RAG Document Processing", \n\
            "Google Gemini AI",\n\
            "Medical Knowledge Base"\n\
        ],\n\
        "version": "2.0.0"\n\
    }\n\
\n\
# API info\n\
@app.get("/api")\n\
async def api_info():\n\
    return {\n\
        "chatbot_endpoint": "/api/chatbot/chat",\n\
        "health_check": "/health",\n\
        "documentation": "/docs",\n\
        "features": {\n\
            "medical_conditions": ["lupus", "diabetes", "hypertension", "malaria"],\n\
            "medications": ["metformin", "insulin", "antibiotics"],\n\
            "confidence_scoring": "95% accuracy",\n\
            "patient_friendly": "Simple explanations and analogies"\n\
        }\n\
    }\n\
\n\
# Serve frontend\n\
@app.get("/chatbot")\n\
async def chatbot_page():\n\
    return FileResponse("static/chatbot/index.html")\n\
\n\
@app.get("/{full_path:path}")\n\
async def serve_frontend(full_path: str):\n\
    if full_path.startswith("api/"):\n\
        return {"error": "API endpoint not found"}\n\
    \n\
    # Serve index.html for all non-API routes\n\
    return FileResponse("static/index.html")\n\
\n\
@app.get("/")\n\
async def root():\n\
    return {\n\
        "message": "HealthTech Track 2 - AI Medical Assistant",\n\
        "chatbot_web": "/chatbot",\n\
        "api_docs": "/docs",\n\
        "health": "/health"\n\
    }\n\
\n\
if __name__ == "__main__":\n\
    port = int(os.environ.get("PORT", 8000))\n\
    uvicorn.run(app, host="0.0.0.0", port=port)' > main_railway.py

EXPOSE $PORT

CMD python main_railway.py
